package ru.gb.chat.server.core;

public interface ChatServerListener {
    void onChatServerMessage(String msg);
}

/*
Как добавить новых пользователей в БД в самом коде, или в принципе как менять данные в БД через Idea?

1) Этот вопрос скорее к уроку №6 или даже по всей стилистике именования переменных и объектов: Создано два класса ServerSocketThread и SocketThread, один для сервера, второй для клиентов. Чтобы в них не путаться, допустимо ли именовать хотя бы имена экземпляров классов не сокетами и серверсокетами а сервером и клиентами? И в целом, давно наблюдаю, что экземпляры классов часто именуются очень сходно с самим классом, так принято или это уже личная привычка?
2) Объясните пожалуйста эти записи:
ClientThread client = (ClientThread) thread;
ClientThread client = (ClientThread) clients.get(i);
Такое ощущение, что во время уроков я провтыкал какой-то важный момент, почему в правой половине строк ClientThread заключен в скобки и стоит обособленно?

1) Как подключаются готовые фреймворки? Устанавливаются просто как дополнительная библиотека?
2) Какие темы стоит изучить после Java 1 и 2 перед началом разработки Android приложения?
3) Можно ли без метода API с помощью Java парсить информацию с сайтов в сети? Если да, что стоит по этому вопросу посмотреть? (знаю что Python такое умеет, а вот Java)
4) Disconnect в чате в итоге реализован через эксепшн:
4.1 Насколько это правильно (Вы говорили что это нормально, но насколько правильно)?
4.2 Можно ли остановить оба потока одновременно, чтобы его избежать? (я пытался , не вышло)
4.3 Есть ли способ отключения сразу нескольких потоков? (допустим что-то пошло совсем не так и я хочу моментально оставить из 10 потоков)
4.4 Что стоит использовать вместо interrupt и stop, если я хочу сейчас же остановить поток и я знаю что от этого ничего плохого не произойдет?

Расскажите , пожалуйста, подробнее про лямбда-выражения

    Это слишком сложно! Как это можно запомнить? Это можно написать только с помощью идеи...
    return entries.get(name).stream().map(person -> person.email)
    .collect(Collectors.toCollection(ArrayList::new));
    Покажите, как найти все возможные действия в различных объектах, которые прослушивает ActionListener. Я так и не смог найти, что в JTextField можно слушать нажатие энтера...
    Почему мы используем интерфейс Thread.UncaughtExceptionHandler? Только потому, что нет консоли при работе с окнами?

    Как часто в Java придётся сталкиваться с БД в дальнейшем?
    Нормально ли, что случаются панические атаки, когда остаёшься один на один с кодом? А когда слушаешь преподавателя или наставника — всё вроде нормально и местами даже понятно.

    Почему в ClientGUI при вызове SwingUtilities.invokeLater мы пользуемся интерфейсом Runnable, а в ServerGUI используем лямбду?
    В ClientGUI мы передаём в разные компоненты один и тот же ActionListener, в котором анализируем источник события. Не лучше ли было бы определить отдельных слушателей для каждого компонента?
    Зачем два оператора return в ru.gb.chat.server.core.ChatServer#handleNonAuthMessage? не лучше ли использовать полное ветвление?
    Схожий вопрос по ru.gb.chat.server.core.ChatServer#sendToAllAuthorizedClients. Мы же просто отправляем сообщение только авторизованным клиентам, зачем инвертировать условие? только для того, чтобы использовать continue?

Почему в либе статическим String присвоили значения через слэш "/" ?
Зачем мы джарник sqlite-jdbc-3.30.1.jar прикручиваем? Чтобы с помощью его библиотеки делать запросы в нашу базу данных? Или как?
где и когда правильно использовать String/StringBuffer/StringBuilder.
Какие методы выбрасывают nullPointerException?

В ArrayList{n,n,n,n,n,n,n} когда мы удаляем например элемент с индексом 2 что происходит внутри? Создается новый ArrayList или происходит смещение элементов внутри существующего ArrayList?
Можно уточнить отличие LinkedList и ArrayList? Как я понимаю в ArrayList используется массив, в LinkedList уже нет, но он состоят тоже из элементов.
Создать поток мы можем с помощью Runnable и Thread, а вот существенное отличие только в том чтобы наследовать если нужно что-то переопределить?
thread.start() запуск потока происходит именно здесь? Как я понял start() вызывает run(), а что происходит если мы просто вызовем run()?

вопрос почему не просто new Runnable: что делает invokeLater

Какой план действий вы бы рекомендовали для нас - после какой четверти (2, 3 или 4) начинать искать работу?
Что помимо курса ГЮ вы бы порекомендовали к прям вот обязательному изучению?
Что для вас, как интервьюера, важно в соискателях на джуна, на что вы обращаете особое внимание?

1) Как работать с другими сетевыми протоколами (с UDP, например) и URL?
2) Хотелось бы увидеть пару примеров с разбором по лямбда-выражениям и Stream API.
3) Можно ли средствами Java узнавать процессорное время и объем выделенной памяти при исполнении программы?

* */