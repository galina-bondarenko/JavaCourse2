package ru.gb.jtwo.network;

import java.net.Socket;

public interface SocketThreadListener {
    void onSocketStart(SocketThread thread, Socket socket);
    void onSocketStop(SocketThread thread);
    void onSocketReady(SocketThread thread, Socket socket);
    void onReceiveString(SocketThread thread, Socket socket, String msg);
    void onSocketException(SocketThread thread, Throwable throwable);
}

/*
    Хотелось бы более подробно разобраться с модулями. Где их можно создавать? Когда их нужно создавать? Зачем они нужны? Ну и т.п.
    Про зависимости модулей тоже неплохо было бы послушать снова.
    И, конечно, вопрос про модуль "либа". За что он будет отвечать? И почему он так необходим?


    Какую программу можно на нашем уровне сделать, чтобы отработать пройденное на втором уровне?
    Что есть джарник? что есть артефакт? что в чем должно быть, чтобы программа заработала у того, у кого нет идеи?
    чем модуль отличется от пакета? 4.как добавлять готовый модуль в разрабатываемую программу?
    Добавили зависимости, а потом "можем импортировать класс" (в видео в 58 мин.) Что куда и зачем импортируется?
    Почему мы эхо сервер создали в пакете без модуля? мы не выполняли всяческих экзекуций над мозгом в виде добавления зависимостей и других сложностей, имеющих место быть в начале урока, но тем не менее в чатике эхо нам отвечало - ?
    Откуда мы берем IP и номер порта при подключении к серверу?
    зачем забирать у клиента inputstream и outputstream? каким образом это помогает обмениваться информацией и между кем и кем? обмен байтами, а не, например, строками, т к in/out в байтах оперируют?
    Почему в SimpleClient мы положили сканнер в трай с ресурсами? Что мы этим получили?
    Класс ServerSocketThread. каким образом трай с ресурсами закрывает соединение? (ServerSocket server = new ServerSocket(port))? и что нужно было бы сделать, если бы оно не было бы в трай с ресурсами? 11.Каким, черт возьми, образом можно понять где-какой полусокет/сокет/недосокет, если они везде называются сокет??? йа запуталсО.

1. что делает out.flush();?
2. Получается мы создаем два потока sockedThread: на сервере и в клиенте? Если да, то как это работает? Как они взаимодействуют?
3. Не понятно где создавать список пользователей (в связи с чем не выполнил задание с массовой рассылкой).
4. При попытке выполнить sockedThread.close() появляется окно с эксепшном. Не разобрался почему.

При закрытии сокета неумолимо появляется эксепшн EOFException


    Непонятна фраза server ==null || ! server.is Alive и вообще что такое null до конца не понимаю, если честно..
    вообще трудно держать в голове многочисленные взаимодействия между классами, интерфейсами, методами, сокетами, потоками(

1) в ServerSocketThread мы пишем socket = server.accept() - это как раз связь сокета клиента с сервер сокетом? не могу понять мы же создали серверсокет выше? просто сокет - это сокет клиента?


    Что такое SwingUtilities и с чем их едят?
    Что такое StackTraceElement в ClientGUI в методе showException? Поподробнее, пожалуйста.
    Нужно ли выносить логику соединения из ClientGUI в какой-нибудь chat.client.core ClientServer по аналогии с ServerGUI/ChatServer? ClientGUI по идее не должен ничего знать про создание своего сокета
    В какой момент времени и где в коде серверная "половинка" сокета соединяется с клиентской? В какой момент и где они решают, что "ну вот твой in это теперь мой out, бро, и наоборот". Вы говорили, что это происходит внутри java, но такая магия сбивает при разбивке кода на шаги.


    Как будем получать список пользователей?
    Как сервер узнает имя пользователя?
    Как обновить список пользователей при подключении нового у всех, кто подключился ранее?

1. Обьясните еще раз в домашке про массивы класс CalcThread , int offset что он делает? Вроде чило не задаем, как он сдвигает массив в итоге? И почему мы не применили синхронизацию? И повторите еще раз почему мы не использовали ранаблы, а лучше треды?
2. Еще раз обьясните про синхронизацию потоков?
3. Чем отличаются методы interrupt, interrupted, isInterrupted?
4. В каком случае будет выброшено исключение InterruptedException, какие методы могут его выбросить?
После джавы2 стоит идти к вам на курс алгоритмы? или тяжело будет лучше после джавы3?

Вопрос №1 скорее не по теме урока, а по профессии в целом. Было сказано, что архитектура сетевого чата в том виде, в котором она была показана, оказалась "мыслезатратна" на несколько дней и несколько человек. Как часто позволяют боссы прям глубоко думать на будущим проектом вместо "вот ТЗ, прям пиши".
2) Касаемо интерфейсов листнеров. Т.к. они сделаны независимыми и универсальными, то получается, их использовать могут не только модули нашего чата, но и любой сторонний софт, навроде облачного хранилища логов, какой-то настраиваемый фильтр сообщений, отсекающий нецензурщину, вплоть до офицеров КГБ?
3) Обнаружил пробел в понимании интерфейсов. правильно ли я мыслю в этом конкретном случае: созданные интерфейсы для сокет треда и сокета кратко описывают возможные события, появляющиеся в потоках, а затем заинтересованные классы реализуют переопределенные методы каждый по-своему, т.е. описывают действия кодом, который пишется в теле метода.

Если наследуемый класс находится в другом модуле, то ты тоже добавляем его в dependent?
И хотелось бы еще раз услышать про листнеры, пока сложновато для понимания.

1. Объясните пожалуйста как происходит процесс назначения "зависимостей" (Какие проблемы могут возникать). Столкнулся с проблемой того, что НЕ импортируются классы после назначения зависимостей.
2. Где и откуда и как - чат будет получать ip рандомных клиентов и как реализуется размещение чата к примеру на стороннем сервере? (все настройки вручную или программу можно научить самостоятельно определять пул айпи для пользователей?)
3. Можно ли еще раз услышать принцип работы механизма: кнопка -> событие?
4. Умеет ли JAVA самостоятельно (или программа написанная только на JAVA) считывать данные для работы напрямую из интеренета (пример: парсер трафика интернет)?
5. Какие самые перспективные направления есть для программиста на J сейчас? Какое из них лучше выбирать для развития?
6. Какие языки стоит еще охватить, для того чтобы дополнить более комплексно навык программирования на J?

1) Вопрос по структуре проекта: как правильно добавлять в СКВ проект с модулями. До текущего момента создавал папку .git в последний папке scr, там же где лежат файла типа класса майн и другие классы.
2) Вопрос по депендеансам: Как можно одному без тимлидов и подсказок понять какие модули надо доключать и что от чего должно зависимость, есть ли стандартные правила или алгоритмы. Сюда же можно добавать, как продумывать архитектуру проекта.

Чем принципиально отличаются методы класса Thread, start() и run(). Мы в классе SocketThread вызываем именно start() в конструкторе класса.
В ChatServer мы используем класс SimpleDateFormat, чем он отличается от устаревшего Date, Calendar и других?
Мы в ServerSocketThread переопредлили метод run при наследовании, в котором для листенера вызвали пустой метод onServerStart из интерфейса ServerSocketThreadListener. Как он будет работать, если тела метода нет и мы его не реализовали?
Я правильно понял, что invokeLater с анонимным классом Runnable создает буферную зону, из которой в поток будет попадать только по 1 сообщению?
При попадании в буфер EDT нескольких сообщений одновременно, в какой последовательности они будут выходить в поток?
Зачем создается массив из StackTraceElement?
И самый главный вопрос - как разбираясь с кодом не запутаться в методах и классах и запомнить кто за что отвечает?

writeUTF записывает данные, а как программа понимает, что нужно отправить его?

я вот не могу понять почему когда сервер не живой он не видит null? ведь null это ничего и когда мы проверяем что сервер не живой мы же должны получить null. Я не понимаю отличия в if (server == null || !server.isAlive())

public class ServerSocketThread /для чего в методе run() используем continue? пропускаем что-то, а вот что пропускаем и почему?

* */